#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<time.h>
#include <unistd.h>
#define size 1000

int arry [size][size][2];
int arryfuture [size][size][2];
float rangenerate(float minn,float maxx);
int checkN();
void nextgen(int i,int j,float chance);
void display();
void savetofile(int num);
void populate();
int main(int argc, char *argv[]) {
  srand((unsigned int)time(NULL));
  int i;
  int j;
  int u;
  int numofinfected;
  int nomofinppl =0;
  float chance;
  float ranNumber;
  populate();
  for(u =0;u<100;u++){
    savetofile(u);
    for(i = 0;i<size;i++){
      for(j =0;j<size;j++){
	if(arry[j][i][0] == 2 || arry[j][i][0] == 3){
	  nextgen(j,i,0);
	}
	else{
	  numofinfected = checkN(j,i);
          if(numofinfected == 0){
            chance = 0.0;
          }
          else{
            chance = 0.10 * numofinfected;
	  }
          nextgen(j,i,chance);
	}
      }
    }
    printf("%d \n",u);
    memcpy(arry, arryfuture, sizeof(arry));;
  }
}

void display(){
  int i;
  int j;
  for(i = 0;i<size;i++){
    for(j =0;j<size;j++){
	printf("%d" , arry[j][i][0]);
    }
    printf("\n");
  }
}

float rangenerate(float minn,float maxx){
  float min = minn;
  float max = maxx;
  float scale = rand() / (float) RAND_MAX;
  float myrandomfloat = min + scale * ( max - min );
  return myrandomfloat;
}

int checkN(int i, int j){ 
  int jj =j;
  int ii =i;
  int numofIn = 0;
  int jNom;
  int iNom;
  int adder;
  int sus;
  if(i==0 && j==0){
    adder = 2;
    sus = 0;
  }
  else if(i==size-1 && j == size-1){
    adder = 1;
    sus = 1;
  }
  else if(i==size-1 && j ==0){
    adder = 2;
    sus =1;
  }
  else if(i==0 && j==size-1){
    ii=1;
    adder = 1;
    sus = 1;
  }
  else{
    adder = 2;
    sus = 1;
  }
  for(iNom=ii-sus;iNom<(ii+adder);iNom++){
    for(jNom=jj-sus;jNom<(jj+adder);jNom++){
      if(iNom == i && jNom == j){
	jNom++;
      }
      if(iNom ==size || jNom == size){
	;
      }
      else if(iNom<0 || jNom<0){
	;
      }
      else{
	if(arry[iNom][jNom][0] == 2 || arry[iNom][jNom][0] == 3){
	  numofIn++;
	}
      }
    }
  }
  return numofIn;
}
void nextgen(int i,int j,float chance){
  if(arry[i][j][0] !=4){
    float ranNum;
    ranNum = rangenerate(0.0,1.0);
    if(arry[i][j][0] == 1){
      if(ranNum < chance){
	arryfuture[i][j][0] = 2;
      }
      else{
	arryfuture[i][j][0] = 1;
      }
    }
    else if (arry[i][j][0] == 2){
      if(ranNum < 0.50){
	arryfuture[i][j][0] = 3;
      }
      else{
	arryfuture[i][j][0] = 1;
      }
    }
    else if(arry[i][j][0] == 3){
      if(arry[i][j][1] == 5){
	arryfuture[i][j][0] = 4;
      }
      else{
	arryfuture[i][j][1] = arry[i][j][1] += 1;
      }
    }
  }
}
void populate(){
  int i;
  int j;
  int u;
    for (i = 0; i < size; i++){
    	for(j = 0; j < size; j++){
		arry[j][i][0] = 1;
		arry[j][i][1] = 0;
	}

    }
    for(u=0;u<100;u++){
	int i = rangenerate(1.0,1000.0);
	int j = rangenerate(1.0,1000.0);
	if(arry[j][i][0] == 2){
	 i--;
	}else
		arry[j][i][0] = 2;
    }
}
void savetofile(int num){
  char *filename, text[50];
  sprintf(text,"visual/data/data%d",num);
  filename = text;
  FILE * fpointer = fopen(filename,"w");
  int i;
  int j;
  for(i = 0;i<size;i++){
    for(j =0;j<size;j++){
      fprintf(fpointer,"%d",arry[j][i][0]);
    }
    fprintf(fpointer,"\n");
  }
  fclose(fpointer);
}
